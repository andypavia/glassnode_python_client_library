import unittest
import os
from client import GlassnodeClient

class TestGlassnodeClient(unittest.TestCase):

    def test_upper(self):

        client = GlassnodeClient(api_key=os.environ['GLASSNODE_API_KEY'])
        query_parameters = {
            "a":"BTC",
        }
        resp = client.get_asssets()
        self.assertEqual(resp.status_code, 200)
        resp = client.get_nvt_ratio_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_coin_days_destroyed_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_average_coin_dormacy_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_average_dormancy_supply_adjusted_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_liveliness_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_asol_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_msol_indicator(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_market_cap_realized(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_market_value_to_realized_value(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_addresses_total_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_addresses_active_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_addresses_new_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_addresses_sending_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_addresses_receiving_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_exchange_inflow(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_exchange_outflow(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_exchange_deposits(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_exchange_withdrawals(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_rate(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_adjusted_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_adjusted_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transfer_volume_adjusted_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_fee_volume_total(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_fee_volume_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_gas_used_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_gas_used_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_gas_used_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_gas_price_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_gas_price_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transaction_gas_limit_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_transaction_gas_limit_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_created_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_spent_count(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_created_value_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_created_value_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_created_value_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_spent_value_mean(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_spent_value_median(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_spent_value_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)
        resp = client.get_utxo_spent_value_sum(query_parameters)
        self.assertEqual(resp.status_code, 200)

if __name__ == '__main__':
    unittest.main()
